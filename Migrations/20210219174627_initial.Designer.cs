// <auto-generated />
using System;
using CreatureBracket.Misc;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CreatureBracket.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210219174627_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("CreatureBracket.Models.Bracket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CreatureEntryDeadline")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Brackets");
                });

            modelBuilder.Entity("CreatureBracket.Models.BracketRound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BracketId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("BracketRounds");
                });

            modelBuilder.Entity("CreatureBracket.Models.BracketRoundMatchup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BracketRoundId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Creature1Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Creature1Votes")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Creature2Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Creature2Votes")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("LoserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BracketRoundId");

                    b.HasIndex("Creature1Id");

                    b.HasIndex("Creature2Id");

                    b.HasIndex("LoserId");

                    b.HasIndex("WinnerId");

                    b.ToTable("BracketRoundMatchups");
                });

            modelBuilder.Entity("CreatureBracket.Models.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BIO")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BracketId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("Creatures");
                });

            modelBuilder.Entity("CreatureBracket.Models.CreatureRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("BIO")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BracketId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BracketId");

                    b.ToTable("CreatureRequests");
                });

            modelBuilder.Entity("CreatureBracket.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("CreatureBracket.Models.UserBracket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserBrackets");
                });

            modelBuilder.Entity("CreatureBracket.Models.UserBracketRound", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("RoundType")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserBracketId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserBracketId");

                    b.ToTable("UserBracketRounds");
                });

            modelBuilder.Entity("CreatureBracket.Models.UserBracketRoundMatchup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("Creature1Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Creature1Votes")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("Creature2Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("Creature2Votes")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("LoserId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserBracketRoundId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("WinnerId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Creature1Id");

                    b.HasIndex("Creature2Id");

                    b.HasIndex("LoserId");

                    b.HasIndex("UserBracketRoundId");

                    b.HasIndex("WinnerId");

                    b.ToTable("UserBracketRoundMatchups");
                });

            modelBuilder.Entity("CreatureBracket.Models.BracketRound", b =>
                {
                    b.HasOne("CreatureBracket.Models.Bracket", "Bracket")
                        .WithMany()
                        .HasForeignKey("BracketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("CreatureBracket.Models.BracketRoundMatchup", b =>
                {
                    b.HasOne("CreatureBracket.Models.BracketRound", "Round")
                        .WithMany("Matchups")
                        .HasForeignKey("BracketRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreatureBracket.Models.Creature", "Creature1")
                        .WithMany()
                        .HasForeignKey("Creature1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreatureBracket.Models.Creature", "Creature2")
                        .WithMany()
                        .HasForeignKey("Creature2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreatureBracket.Models.Creature", "Loser")
                        .WithMany()
                        .HasForeignKey("LoserId");

                    b.HasOne("CreatureBracket.Models.Creature", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("Creature1");

                    b.Navigation("Creature2");

                    b.Navigation("Loser");

                    b.Navigation("Round");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("CreatureBracket.Models.Creature", b =>
                {
                    b.HasOne("CreatureBracket.Models.Bracket", "Bracket")
                        .WithMany()
                        .HasForeignKey("BracketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("CreatureBracket.Models.CreatureRequest", b =>
                {
                    b.HasOne("CreatureBracket.Models.Bracket", "Bracket")
                        .WithMany()
                        .HasForeignKey("BracketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("CreatureBracket.Models.UserBracket", b =>
                {
                    b.HasOne("CreatureBracket.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CreatureBracket.Models.UserBracketRound", b =>
                {
                    b.HasOne("CreatureBracket.Models.UserBracket", "Bracket")
                        .WithMany("Rounds")
                        .HasForeignKey("UserBracketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bracket");
                });

            modelBuilder.Entity("CreatureBracket.Models.UserBracketRoundMatchup", b =>
                {
                    b.HasOne("CreatureBracket.Models.Creature", "Creature1")
                        .WithMany()
                        .HasForeignKey("Creature1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreatureBracket.Models.Creature", "Creature2")
                        .WithMany()
                        .HasForeignKey("Creature2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreatureBracket.Models.Creature", "Loser")
                        .WithMany()
                        .HasForeignKey("LoserId");

                    b.HasOne("CreatureBracket.Models.UserBracketRound", "Round")
                        .WithMany("Matchups")
                        .HasForeignKey("UserBracketRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CreatureBracket.Models.Creature", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId");

                    b.Navigation("Creature1");

                    b.Navigation("Creature2");

                    b.Navigation("Loser");

                    b.Navigation("Round");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("CreatureBracket.Models.BracketRound", b =>
                {
                    b.Navigation("Matchups");
                });

            modelBuilder.Entity("CreatureBracket.Models.UserBracket", b =>
                {
                    b.Navigation("Rounds");
                });

            modelBuilder.Entity("CreatureBracket.Models.UserBracketRound", b =>
                {
                    b.Navigation("Matchups");
                });
#pragma warning restore 612, 618
        }
    }
}
